// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using TourGuideBD.Data;

namespace TourGuideBD.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TourGuideBD.Models.AddNewPlaceByClient", b =>
                {
                    b.Property<int>("PlaceByClientId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<int>("DistricId");

                    b.Property<int>("DivisionId");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<DateTime>("EntryDate");

                    b.Property<string>("EntryFee")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("HowToGo")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<byte[]>("Image")
                        .IsRequired();

                    b.Property<bool>("IsSeen");

                    b.Property<int>("Phone")
                        .HasMaxLength(20);

                    b.Property<string>("PlaceName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("PlaceTypeId");

                    b.Property<string>("SenderName")
                        .IsRequired();

                    b.Property<string>("TouristEntryTime")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int>("UpazilaId");

                    b.HasKey("PlaceByClientId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("PlaceTypeId");

                    b.ToTable("AddNewPlaceByClient");
                });

            modelBuilder.Entity("TourGuideBD.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("RegClientName");

                    b.Property<DateTime>("RegDate");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("TourGuideBD.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<DateTime>("CommentTime");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<bool>("IsSeen");

                    b.Property<string>("SenderName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("CommentId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("TourGuideBD.Models.Distric", b =>
                {
                    b.Property<int>("DistricId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DistricName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("DivisionId");

                    b.Property<DateTime>("EntryDate");

                    b.HasKey("DistricId");

                    b.HasIndex("DivisionId");

                    b.ToTable("Distric");
                });

            modelBuilder.Entity("TourGuideBD.Models.Division", b =>
                {
                    b.Property<int>("DivisionId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DivisionName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("EntryDate");

                    b.HasKey("DivisionId");

                    b.ToTable("Division");
                });

            modelBuilder.Entity("TourGuideBD.Models.PlaceType", b =>
                {
                    b.Property<int>("PlaceTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<DateTime>("EntryDate");

                    b.Property<string>("PlaceTypeName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("PlaceTypeId");

                    b.ToTable("PlaceType");
                });

            modelBuilder.Entity("TourGuideBD.Models.Upazila", b =>
                {
                    b.Property<int>("UpazilaId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DistricId");

                    b.Property<int>("DivisionId");

                    b.Property<DateTime>("EntryDate");

                    b.Property<string>("UpazilaName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("UpazilaId");

                    b.HasIndex("DivisionId");

                    b.ToTable("Upazila");
                });

            modelBuilder.Entity("TourGuideBD.Models.VisitingPlace", b =>
                {
                    b.Property<int>("PlaceId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<int>("DistricId");

                    b.Property<int>("DivisionId");

                    b.Property<DateTime>("EntryDate");

                    b.Property<string>("EntryFee")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("HowToGo")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<byte[]>("Image")
                        .IsRequired();

                    b.Property<string>("PlaceName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("PlaceTypeId");

                    b.Property<string>("TouristEntryTime")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int>("UpazilaId");

                    b.HasKey("PlaceId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("PlaceTypeId");

                    b.ToTable("VisitingPlace");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TourGuideBD.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TourGuideBD.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TourGuideBD.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TourGuideBD.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TourGuideBD.Models.AddNewPlaceByClient", b =>
                {
                    b.HasOne("TourGuideBD.Models.Division", "Division")
                        .WithMany("AddNewPlaceByClient")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TourGuideBD.Models.PlaceType", "PlaceType")
                        .WithMany("AddNewPlaceByClient")
                        .HasForeignKey("PlaceTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TourGuideBD.Models.Distric", b =>
                {
                    b.HasOne("TourGuideBD.Models.Division", "Division")
                        .WithMany("Distric")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TourGuideBD.Models.Upazila", b =>
                {
                    b.HasOne("TourGuideBD.Models.Division", "Division")
                        .WithMany("Upazila")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TourGuideBD.Models.VisitingPlace", b =>
                {
                    b.HasOne("TourGuideBD.Models.Division", "Division")
                        .WithMany("VisitingPlace")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TourGuideBD.Models.PlaceType", "PlaceType")
                        .WithMany("VisitingPlace")
                        .HasForeignKey("PlaceTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
